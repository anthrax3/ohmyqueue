// Code generated by protoc-gen-go.
// source: serverpb.proto
// DO NOT EDIT!

/*
Package serverpb is a generated protocol buffer package.

It is generated from these files:
	serverpb.proto

It has these top-level messages:
	Req
	Msg
	StatusCode
*/
package serverpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Req struct {
	Topic  string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Offset string `protobuf:"bytes,2,opt,name=offset" json:"offset,omitempty"`
}

func (m *Req) Reset()                    { *m = Req{} }
func (m *Req) String() string            { return proto.CompactTextString(m) }
func (*Req) ProtoMessage()               {}
func (*Req) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Req) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Req) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

type Msg struct {
	Topic  string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Body   string `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Msg) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Msg) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Msg) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type StatusCode struct {
	Code int32 `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
}

func (m *StatusCode) Reset()                    { *m = StatusCode{} }
func (m *StatusCode) String() string            { return proto.CompactTextString(m) }
func (*StatusCode) ProtoMessage()               {}
func (*StatusCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *StatusCode) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*Req)(nil), "serverpb.Req")
	proto.RegisterType((*Msg)(nil), "serverpb.Msg")
	proto.RegisterType((*StatusCode)(nil), "serverpb.StatusCode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pub service

type PubClient interface {
	PutMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*StatusCode, error)
}

type pubClient struct {
	cc *grpc.ClientConn
}

func NewPubClient(cc *grpc.ClientConn) PubClient {
	return &pubClient{cc}
}

func (c *pubClient) PutMsg(ctx context.Context, in *Msg, opts ...grpc.CallOption) (*StatusCode, error) {
	out := new(StatusCode)
	err := grpc.Invoke(ctx, "/serverpb.Pub/PutMsg", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pub service

type PubServer interface {
	PutMsg(context.Context, *Msg) (*StatusCode, error)
}

func RegisterPubServer(s *grpc.Server, srv PubServer) {
	s.RegisterService(&_Pub_serviceDesc, srv)
}

func _Pub_PutMsg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Msg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PubServer).PutMsg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Pub/PutMsg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PubServer).PutMsg(ctx, req.(*Msg))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Pub",
	HandlerType: (*PubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutMsg",
			Handler:    _Pub_PutMsg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverpb.proto",
}

// Client API for Sub service

type SubClient interface {
	Poll(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Msg, error)
}

type subClient struct {
	cc *grpc.ClientConn
}

func NewSubClient(cc *grpc.ClientConn) SubClient {
	return &subClient{cc}
}

func (c *subClient) Poll(ctx context.Context, in *Req, opts ...grpc.CallOption) (*Msg, error) {
	out := new(Msg)
	err := grpc.Invoke(ctx, "/serverpb.Sub/poll", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Sub service

type SubServer interface {
	Poll(context.Context, *Req) (*Msg, error)
}

func RegisterSubServer(s *grpc.Server, srv SubServer) {
	s.RegisterService(&_Sub_serviceDesc, srv)
}

func _Sub_Poll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Req)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubServer).Poll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/serverpb.Sub/Poll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubServer).Poll(ctx, req.(*Req))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sub_serviceDesc = grpc.ServiceDesc{
	ServiceName: "serverpb.Sub",
	HandlerType: (*SubServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "poll",
			Handler:    _Sub_Poll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "serverpb.proto",
}

func init() { proto.RegisterFile("serverpb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 198 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2b, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0x2a, 0x48, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x8c,
	0xb9, 0x98, 0x83, 0x52, 0x0b, 0x85, 0x44, 0xb8, 0x58, 0x4b, 0xf2, 0x0b, 0x32, 0x93, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0x20, 0x1c, 0x21, 0x31, 0x2e, 0xb6, 0xfc, 0xb4, 0xb4, 0xe2, 0xd4,
	0x12, 0x09, 0x26, 0xb0, 0x30, 0x94, 0xa7, 0xe4, 0xce, 0xc5, 0xec, 0x5b, 0x9c, 0x4e, 0x94, 0x26,
	0x56, 0x98, 0x26, 0x21, 0x21, 0x2e, 0x96, 0xa4, 0xfc, 0x94, 0x4a, 0x09, 0x66, 0xb0, 0x62, 0x30,
	0x5b, 0x49, 0x81, 0x8b, 0x2b, 0xb8, 0x24, 0xb1, 0xa4, 0xb4, 0xd8, 0x39, 0x3f, 0x25, 0x15, 0xa4,
	0x22, 0x39, 0x3f, 0x25, 0x15, 0x6c, 0x1c, 0x6b, 0x10, 0x98, 0x6d, 0x64, 0xc6, 0xc5, 0x1c, 0x50,
	0x9a, 0x24, 0xa4, 0xcf, 0xc5, 0x16, 0x50, 0x5a, 0x02, 0xb2, 0x94, 0x57, 0x0f, 0xee, 0x17, 0xdf,
	0xe2, 0x74, 0x29, 0x11, 0x04, 0x17, 0x61, 0x92, 0x12, 0x83, 0x91, 0x2e, 0x17, 0x73, 0x70, 0x69,
	0x92, 0x90, 0x1a, 0x17, 0x4b, 0x41, 0x7e, 0x4e, 0x0e, 0xb2, 0xae, 0xa0, 0xd4, 0x42, 0x29, 0x54,
	0x43, 0x94, 0x18, 0x92, 0xd8, 0xc0, 0xe1, 0x62, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xca, 0xca,
	0x23, 0xed, 0x29, 0x01, 0x00, 0x00,
}
